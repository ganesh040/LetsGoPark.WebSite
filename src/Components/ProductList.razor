@using LetsGoPark.WebSite.Models
@using LetsGoPark.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div>
    <div class="row">
        <div class="col">
            <label class="filter-label" for="category">Select a park type to filter by type: </label>
            <select @onchange="UpdateFilterType" id="parkType">
                <option selected disabled>Please select a park type</option>
                @foreach (ParkTypeEnum category in Enum.GetValues(typeof(ParkTypeEnum)))
                {
                    <option value="@category">@ParkTypeEnumExtensions.DisplayName(category)</option>
                }
            </select>
            <input id="filter-input" type="text" @oninput="UpdateFilterText" value="@FilterDataString" />
            <button @onclick="EnableFilterData" class="btn-filter">Search</button>
            <button @onclick="ClearFilterData" class="btn-filter">Clear</button>
        </div>
    </div>
</div>

<div class="container-fluid">
    @{
        var productList = ProductService.GetAllData();

        // Group by the Enum
        foreach (ParkTypeEnum parkType in Enum.GetValues(typeof(ParkTypeEnum)))
        {
            // Get only the products that are of this enum type
            var productListGroup = productList.Where(m => m.ParkType == parkType.ToString());

            // Order the list alphabetically
            productListGroup = productListGroup.OrderBy(m => m.Title);

            if (FilterData)
            {
                productListGroup = productListGroup.Where(m => m.Title.ToLower().Contains(FilterDataString.ToLower()));
            }

            if (!string.IsNullOrEmpty(FilterDataType) && !FilterDataType.Equals("None"))
            {
                productListGroup = productListGroup.Where(m => m.ParkType.ToLower().Contains(FilterDataType.ToLower()));
            }

            if (productListGroup.Any())
            {
                <hr />
                //<h2>@parkType.DisplayName()</h2>

                <div class="row">
                    <div class="card-columns">
                        @foreach (var product in productListGroup)
                        {
                            <div class="card">
                                <div class="card-img" style="background-image: url('@product.Image');">
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">@product.Title</h5>
                                </div>
                                <div class="card-footer">
                                    <small class="text-muted">
                                        <button @onclick="(() => SelectProduct(product.Id))" id="MoreInfoButton_@product.Id" data-toggle="modal" data-target="#productModal" class="btn btn-primary">More Info</button>
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    }
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                            <p class="card-activites">@selectedProduct.Activities</p>
                            <p class="card-type">Park Type :@selectedProduct.ParkType</p>



                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col">
                                @{
                                    var voteString = $"{voteCount} {voteLabel}";

                                    if (voteCount == 0)
                                    {
                                        voteString = "Be the first to vote!";
                                    }

                                    <span>@voteString</span>

                                    for (int i = 1; i < 6; i++)
                                    {
                                        var currentStar = i;
                                        var checkedText = "";

                                        if (i <= currentRating)
                                        {
                                            checkedText = "checked";
                                        }

                                        <span class="fa fa-star @checkedText" @onclick="(() => SubmitRating(currentStar))"></span>
                                    }
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col">
                                @{
                                    // First show all the existing comments
                                    foreach (var comment in selectedProduct.CommentList)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                @comment.Comment
                                            </div>
                                        </div>
                                    }

                                    // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                    if (NewComment)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                <input type="text" @oninput="UpdateCommentText" value="@NewCommentText" />
                                                <button @onclick="AddComment" class="btn btn-success" data-toggle="modal">Save Comment</button>
                                            </div>
                                        </div>
                                    }

                                    // If this is not a new comment, then show the buttons for Adding comment and Close
                                    if (!NewComment)
                                    {
                                        <div class="row">
                                            <div class="col">
                                                <button @onclick="ShowNewCommentInput" id="AddComment" class="btn btn-primary">Add Comment</button>
                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code
{
    ProductModel selectedProduct;
    string selectedProductId;
    string FilterDataType;
    string FilterDataString = "";
    bool FilterData = false;
    bool NewComment = false;
    string NewCommentText = "";
    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
        GetCurrentRating();
    }

    void GetCurrentRating()
    {
        if (selectedProduct.Ratings == null || !selectedProduct.Ratings.Any())
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectedProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectedProduct.Ratings.Sum() / voteCount;
        }

        System.Console.WriteLine($"Current rating for {selectedProduct.Id}: {currentRating}");
    }

    void SubmitRating(int rating)
    {
        System.Console.WriteLine($"Rating received for {selectedProduct.Id}: {rating}");
        ProductService.AddRating(selectedProductId, rating);
        SelectProduct(selectedProductId);
    }

    void ShowNewCommentInput()
    {
        NewComment = true;
    }

    void UpdateCommentText(ChangeEventArgs e)
    {
        NewCommentText = e.Value.ToString();
    }

    void AddComment()
    {
        selectedProduct.CommentList.Add(new CommentModel { Comment = NewCommentText });
        ProductService.UpdateData(selectedProduct);
        NewComment = false;
    }

    void UpdateFilterText(ChangeEventArgs e)
    {
        FilterDataString = e.Value.ToString();
    }

    void EnableFilterData()
    {
        FilterData = true;
    }

    void ClearFilterData()
    {
        FilterData = false;
    }

    void UpdateFilterType(ChangeEventArgs e)
    {
        FilterDataType = e.Value.ToString();
    }
}

